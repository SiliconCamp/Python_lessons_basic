#!/usr/bin/python3

"""
== Лото ==

Правила игры в лото.

Игра ведется с помощью специальных карточек, на которых отмечены числа, 
и фишек (бочонков) с цифрами.

Количество бочонков — 90 штук (с цифрами от 1 до 90).

Каждая карточка содержит 3 строки по 9 клеток. В каждой строке по 5 случайных цифр, 
расположенных по возрастанию. Все цифры в карточке уникальны. Пример карточки:

--------------------------
    9 43 62          74 90
 2    27    75 78    82
   41 56 63     76      86 
--------------------------

В игре 2 игрока: пользователь и компьютер. Каждому в начале выдается 
случайная карточка. 

Каждый ход выбирается один случайный бочонок и выводится на экран.
Также выводятся карточка игрока и карточка компьютера.

Пользователю предлагается зачеркнуть цифру на карточке или продолжить.
Если игрок выбрал "зачеркнуть":
	Если цифра есть на карточке - она зачеркивается и игра продолжается.
	Если цифры на карточке нет - игрок проигрывает и игра завершается.
Если игрок выбрал "продолжить":
	Если цифра есть на карточке - игрок проигрывает и игра завершается.
	Если цифры на карточке нет - игра продолжается.
	
Побеждает тот, кто первый закроет все числа на своей карточке.

Пример одного хода:

Новый бочонок: 70 (осталось 76)
------ Ваша карточка -----
 6  7          49    57 58
   14 26     -    78    85
23 33    38    48    71   
--------------------------
-- Карточка компьютера ---
 7 87     - 14    11      
      16 49    55 88    77    
   15 20     -       76  -
--------------------------
Зачеркнуть цифру? (y/n)

Подсказка: каждый следующий случайный бочонок из мешка удобно получать 
с помощью функции-генератора.

Подсказка: для работы с псевдослучайными числами удобно использовать 
модуль random: http://docs.python.org/3/library/random.html

"""

# РЕШЕНИЕ:
# Данный проект уже явно требует некоторого подобия документации, поэтому я сначала
# изложу здесь свои идеи, предполагаемые узлы и объяснение принципа работы.
# NB: Кстати, я против использования тройных кавычек для комментирования - не совсем понял зачем так поступили в ДЗ.
#
# Прежде всего пойдем от подсказки про модуль random, нет ли там какой-то полезной истории.
# Пока идея только в том, чтобы генерировать список уникальных (неповторяющихся бочонков)
# Средствами модуля - random.sample
#
# Теперь продумаем логику раунда:
# 1. Выводим на экран инструкцию, что человек играет против компьютера, правила и т.п. (один раз при запуске)
# 2. Сгененируем карточку для игрока и для компьютера
# 3. Сгенерируем последовательность бочонков. Да, это не так как реальной игре (рука в мешке), но проще и быстрее.
# 4. Дальше у нас должен быть основной цикл раунда, который прервется только в следующих пяти случаях:
#    - выбрал зачеркнуть, а такого номер нет
#    - выбрал продолжить, а номер-то был
#    - решил сам выйти (в условии этого нет, но так красивее)
#    - вся карточка компьютера компьютера заполнилась
#    - вся карточка игрока заполнилась
# 5. Выводим на экран, что игра завершена.
#
# Теперь собственно о логике внутри основного цикла. Нам понадобится следующие инструменты:
# 1. Содержится ли бочонок в карте
# 2. Достигнут ли конец карты (все цифры зачеркнуты)
# 3. Создать список бочонков (пока пойдем от идеи подсказки и заранее сгенерированного сипска)
# 4. Достать бочонок из мешка (допустим .pop из списка)
# 5. Генератор карточки и какой-то способ ее форматирования
#

# Выносим импорты и константы в начало, как по стандарту
import random # Нужен для генерации бочонков
import copy # Нужен для генерации внешнего вида карточки

# Константы размеров карточки.
MAX_BARREL = 90
DIGITS_IN_CARD = 15
DIGITS_IN_LINE = 5

# Итак, для начала сгенерируем список бочонков и напишем функцию выдачи очередного бочонка:


def make_barr_list():
    return random.sample(range(1, MAX_BARREL + 1), 90)


def take_barrel(barr_list):
    return barr_list.pop()


# Теперь нужно создать карточки и красиво их вывести на экран.


def gen_card():
    '''
    :return: combination of int digits without repetition, k = DIGITS_IN_CARD, n = 1..MAX_BARREL, divided into 3 sorted lines
    eg. [[2, 11, 14, 30, 79], [43, 54, 60, 69, 77], [16, 74, 81, 82, 83]]
    '''
    # combination of 15 random digits 1..MAX_BARREL without repetitions
    num_comb = random.sample(range(1, MAX_BARREL + 1), DIGITS_IN_CARD)
    # make list of sorted slices of num_comb of size DIGITS_IN_LINE;
    # ie. divide num_comb into 3 sorted lists
    card = [sorted(num_comb[i:i + DIGITS_IN_LINE]) for i in range(0, len(num_comb), DIGITS_IN_LINE)]
    return card

